schema {
  query: QueryRoot
  mutation: MutationRoot
}

input CreateJobFromTaskInput {
  taskId: ID!
  variables: [JobVariableInput!]!
}

input CreateSessionInput {
  privileges: [String!]
}

input CreateStepInput {
  name: String!
  description: String
  processor: ProcessorInput!
  advertisedVariableKey: String
}

input CreateTaskInput {
  name: String!
  description: String
  labels: [String!]
  variables: [CreateVariableInput!]
  steps: [CreateStepInput!]!
  onConflict: OnConflict
}

input CreateVariableInput {
  key: String!
  description: String
  defaultValue: String
  exampleValue: String
  constraints: VariableConstraintsInput
}

scalar DateTimeUtc

type GitClone {
  url: String!
  username: String
  password: String
  path: String
}

input GitCloneInput {
  url: String!
  username: String
  password: String
  path: String
}

input GlobalVariableInput {
  key: String!
  value: String!
  onConflict: OnConflict
}

type Header {
  name: String!
  value: String!
}

input HeaderInput {
  name: String!
  value: String!
}

type HttpRequest {
  url: String!
  method: Method!
  headers: [Header!]!
  body: String
  assertStatus: [Int!]!
}

input HttpRequestInput {
  url: String!
  method: Method!
  headers: [HeaderInput!]
  body: String
  assertStatus: [Int!]
}

type Job {
  id: ID!
  name: String!
  description: String
  status: JobStatus!
  steps: [JobStep!]
  task: Task
}

enum JobStatus {
  SCHEDULED
  PENDING
  RUNNING
  FAILED
  CANCELLED
  OK
}

type JobStep {
  id: ID!
  name: String!
  description: String
  processor: Processor
  position: Int!
  startedAt: DateTimeUtc
  finishedAt: DateTimeUtc
  status: JobStepStatus!
  output: StepOutput!
  job: Job
}

enum JobStepStatus {
  INITIALIZED
  PENDING
  RUNNING
  FAILED
  CANCELLED
  OK
}

input JobVariableInput {
  key: String!
  value: String!
}

type JsonEdit {
  json: String!
  program: String!
  prettyOutput: Boolean!
}

input JsonEditInput {
  json: String!
  program: String!
  prettyOutput: Boolean
}

enum Method {
  CONNECT
  DELETE
  GET
  HEAD
  OPTIONS
  PATCH
  POST
  PUT
  TRACE
}

type MutationRoot {
  createTask(task: CreateTaskInput!): Task!
  createJobFromTask(job: CreateJobFromTaskInput!): Job!
  createGlobalVariable(variable: GlobalVariableInput!): Boolean!
  createSession(session: CreateSessionInput!): String!
  updatePrivileges(privileges: UpdatePrivilegesInput!): Session!
}

enum OnConflict {
  ABORT
  UPDATE
}

type PrintOutput {
  output: String!
}

input PrintOutputInput {
  output: String!
}

union Processor =
    GitClone
  | HttpRequest
  | JsonEdit
  | PrintOutput
  | RedisCommand
  | ShellCommand
  | SqlQuery
  | StringRegex
input ProcessorInput {
  gitClone: GitCloneInput
  httpRequest: HttpRequestInput
  jsonEdit: JsonEditInput
  printOutput: PrintOutputInput
  redisCommand: RedisCommandInput
  shellCommand: ShellCommandInput
  sqlQuery: SqlQueryInput
  stringRegex: StringRegexInput
}

type QueryRoot {
  tasks(search: SearchTaskInput): [Task!]!
  jobs: [Job!]!
  task(id: ID!): Task
  job(id: ID!): Job
  session: Session
}

type RedisCommand {
  command: String!
  arguments: [String!]
  url: String!
}

input RedisCommandInput {
  command: String!
  arguments: [String!]
  url: String!
}

input SearchTaskInput {
  name: String
  description: String
}

type Session {
  id: ID!
  privileges: [String!]!
}

type ShellCommand {
  command: String!
  arguments: [String!]
  cwd: String
  paths: [String!]
}

input ShellCommandInput {
  command: String!
  arguments: [String!]
  cwd: String
  paths: [String!]
}

type SqlQuery {
  statement: String!
  url: String!
  parameters: [SqlType!]!
}

input SqlQueryInput {
  statement: String!
  url: String!
  parameters: [SqlTypeInput!]
}

type SqlType {
  text: String
  int: Int
  bool: Boolean
}

input SqlTypeInput {
  text: String
  int: Int
  bool: Boolean
}

type Step {
  id: ID!
  name: String!
  description: String
  processor: Processor!
  position: Int!
  task: Task
}

type StepOutput {
  text: String
  html: String
}

type StringRegex {
  input: String!
  regex: String!
  mismatchError: String
  replace: String
}

input StringRegexInput {
  input: String!
  regex: String!
  mismatchError: String
  replace: String
}

type Task {
  id: ID!
  name: String!
  description: String
  labels: [String!]!
  variables: [Variable!]
  steps: [Step!]
}

input UpdatePrivilegesInput {
  id: ID!
  privileges: [String!]!
}

type Variable {
  id: ID!
  key: String!
  description: String
  defaultValue: String
  exampleValue: String
  constraints: VariableConstraints!
  task: Task
  valueAdvertisers: [Task!]!
}

type VariableConstraints {
  selection: [String!]
}

input VariableConstraintsInput {
  selection: [String!]
}
